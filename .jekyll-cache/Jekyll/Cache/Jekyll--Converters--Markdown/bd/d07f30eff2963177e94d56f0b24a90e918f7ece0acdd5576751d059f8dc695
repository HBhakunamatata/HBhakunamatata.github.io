I")<p>implementing CRUD using annotation (Reflection)</p>

<h2 id="crud-using-annotation">CRUD using annotation</h2>

<ul>
  <li>(1) write your SQL in Mapper.interface</li>
</ul>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">interface</span> <span class="nc">EmployeeMapper</span> <span class="o">{</span>

    <span class="nd">@Select</span><span class="o">(</span><span class="s">"select * from employees where emp_no = #{emp_id}"</span><span class="o">)</span>
    <span class="nc">Employee</span> <span class="nf">getEmpById</span> <span class="o">(</span><span class="nd">@Param</span><span class="o">(</span><span class="s">"emp_id"</span><span class="o">)</span> <span class="kt">int</span> <span class="n">emp_no</span><span class="o">);</span>

    <span class="nd">@Select</span><span class="o">(</span><span class="s">"select * from employees limit #{startIndex}, #{pageSize}"</span><span class="o">)</span>
    <span class="nc">List</span><span class="o">&lt;</span><span class="nc">Employee</span><span class="o">&gt;</span> <span class="nf">limitEmp</span> <span class="o">(</span><span class="nd">@Param</span><span class="o">(</span><span class="s">"startIndex"</span><span class="o">)</span> <span class="kt">int</span> <span class="n">startIndex</span><span class="o">,</span>
                             <span class="nd">@Param</span><span class="o">(</span><span class="s">"pageSize"</span><span class="o">)</span> <span class="kt">int</span> <span class="n">pageSize</span><span class="o">);</span>

    <span class="nd">@Insert</span><span class="o">(</span><span class="s">"insert into employees (emp_no, birth_date, first_name, last_name, gender, hire_date) "</span> <span class="o">+</span>
    <span class="s">"values (#{emp_no}, #{birth_date}, #{first_name}, #{last_name}, #{gender}, #{hire_date})"</span><span class="o">)</span>
    <span class="kt">int</span> <span class="nf">insertEmp</span> <span class="o">(</span><span class="nc">Employee</span> <span class="n">emp</span><span class="o">)</span> <span class="o">;</span>

    <span class="nd">@Delete</span><span class="o">(</span><span class="s">"delete from employees where emp_no = #{emp_no}"</span><span class="o">)</span>
    <span class="kt">int</span> <span class="nf">deleteEmp</span> <span class="o">(</span><span class="nd">@Param</span><span class="o">(</span><span class="s">"emp_no"</span><span class="o">)</span> <span class="kt">int</span> <span class="n">emp_no</span><span class="o">);</span>

    <span class="nd">@Update</span><span class="o">(</span><span class="s">"update employees set "</span> <span class="o">+</span>
        <span class="s">"first_name = #{first_name}, "</span> <span class="o">+</span>
        <span class="s">"last_name = #{last_name} "</span> <span class="o">+</span>
    <span class="s">"where emp_no = #{emp_no}"</span><span class="o">)</span>
    <span class="kt">int</span> <span class="nf">updateEmp</span> <span class="o">(</span><span class="nc">Map</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">,</span> <span class="nc">Object</span><span class="o">&gt;</span> <span class="n">map</span><span class="o">);</span>
    <span class="c1">// 但是如果要动态更新属性（即动态生成SQL语句）这种方式就有局限性了</span>
    <span class="c1">// 而且使用sql拼接时，多余或者缺少[' '|AND|OR]会增加很多麻烦</span>
    <span class="c1">// 所以需要动态SQL</span>
<span class="o">}</span>
</code></pre></div></div>

<ul>
  <li>(2) test your code</li>
</ul>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Test</span> <span class="o">{</span>

    <span class="nd">@org</span><span class="o">.</span><span class="na">junit</span><span class="o">.</span><span class="na">Test</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">getEmpById</span><span class="o">()</span> <span class="o">{</span>
        <span class="nc">SqlSession</span> <span class="n">sqlSession</span> <span class="o">=</span> <span class="nc">MyBatisUtils</span><span class="o">.</span><span class="na">getSqlSession</span><span class="o">();</span>

        <span class="nc">EmployeeMapper</span> <span class="n">mapper</span> <span class="o">=</span> <span class="n">sqlSession</span><span class="o">.</span><span class="na">getMapper</span><span class="o">(</span><span class="nc">EmployeeMapper</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
        <span class="nc">Employee</span> <span class="n">emp</span> <span class="o">=</span> <span class="n">mapper</span><span class="o">.</span><span class="na">getEmpById</span><span class="o">(</span><span class="mi">10054</span><span class="o">);</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">emp</span><span class="o">);</span>

        <span class="n">sqlSession</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>
    <span class="o">}</span>

    <span class="nd">@org</span><span class="o">.</span><span class="na">junit</span><span class="o">.</span><span class="na">Test</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">test</span> <span class="o">()</span> <span class="o">{</span>
        <span class="nc">SqlSession</span> <span class="n">sqlSession</span> <span class="o">=</span> <span class="nc">MyBatisUtils</span><span class="o">.</span><span class="na">getSqlSession</span><span class="o">();</span>
        <span class="nc">EmployeeMapper</span> <span class="n">mapper</span> <span class="o">=</span> <span class="n">sqlSession</span><span class="o">.</span><span class="na">getMapper</span><span class="o">(</span><span class="nc">EmployeeMapper</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>

        <span class="nc">Employee</span> <span class="n">emp</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Employee</span><span class="o">(</span>
            <span class="mi">2</span><span class="o">,</span>
            <span class="k">new</span> <span class="nf">Date</span><span class="o">(</span><span class="nc">System</span><span class="o">.</span><span class="na">currentTimeMillis</span><span class="o">()),</span>
            <span class="s">"HH"</span><span class="o">,</span>
            <span class="s">"DD"</span><span class="o">,</span>
            <span class="s">"F"</span><span class="o">,</span>
            <span class="k">new</span> <span class="nf">Date</span><span class="o">(</span><span class="nc">System</span><span class="o">.</span><span class="na">currentTimeMillis</span><span class="o">())</span>
        <span class="o">);</span>

        <span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="n">mapper</span><span class="o">.</span><span class="na">insertEmp</span><span class="o">(</span><span class="n">emp</span><span class="o">);</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">i</span> <span class="o">+</span> <span class="s">"item inserted"</span><span class="o">);</span>

        <span class="nc">Map</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">,</span> <span class="nc">Object</span><span class="o">&gt;</span> <span class="n">map</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">HashMap</span><span class="o">&lt;&gt;();</span>
        <span class="n">map</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">"emp_no"</span><span class="o">,</span> <span class="mi">2</span><span class="o">);</span>
        <span class="n">map</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">"first_name"</span><span class="o">,</span> <span class="s">"SS"</span><span class="o">);</span>
        <span class="n">map</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">"last_name"</span><span class="o">,</span> <span class="s">"LL"</span><span class="o">);</span>
        <span class="kt">int</span> <span class="n">i1</span> <span class="o">=</span> <span class="n">mapper</span><span class="o">.</span><span class="na">updateEmp</span><span class="o">(</span><span class="n">map</span><span class="o">);</span>

        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">i1</span> <span class="o">+</span> <span class="s">"item changed"</span><span class="o">);</span>

        <span class="kt">int</span> <span class="n">i2</span> <span class="o">=</span> <span class="n">mapper</span><span class="o">.</span><span class="na">deleteEmp</span><span class="o">(</span><span class="mi">2</span><span class="o">);</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">i2</span> <span class="o">+</span> <span class="s">"item deleted"</span><span class="o">);</span>

    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<ul>
  <li>
    <p>(3) <strong>Note :</strong></p>

    <ul>
      <li>基本类型的参数或者String类型，需要加上@Param, 引用类型不需要加</li>
      <li>我们在SQL中引用的就是我们这里的@Param()中设定的属性名</li>
      <li>
        <p>使用annotation，不需要提交事务</p>
      </li>
      <li>但是如果要动态更新属性（即动态生成SQL语句）这种方式就有局限性了</li>
      <li>
        <table>
          <tbody>
            <tr>
              <td>而且使用sql拼接时，多余或者缺少[’ ‘</td>
              <td>AND</td>
              <td>OR]会增加很多麻烦</td>
            </tr>
          </tbody>
        </table>
      </li>
      <li>所以需要动态SQL</li>
    </ul>
  </li>
</ul>
:ET